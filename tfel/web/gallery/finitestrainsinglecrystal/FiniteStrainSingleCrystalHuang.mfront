@DSL       ImplicitFiniteStrain;
@Behaviour FiniteStrainSingleCrystalBrickHuang;
@Author    Juergen Almanstoetter, Thomas Helfer;
@Date      25/09/2017;
@Description{
  "Implementation of the Huang's model."
}

@Algorithm NewtonRaphson;
@Theta   1;
@Epsilon 1.e-11;

@Brick FiniteStrainSingleCrystal;
@CrystalStructure FCC;
@SlidingSystem <0,1,-1>{1,1,1};

@MaterialProperty stress h0;
@MaterialProperty stress tau_sat;
@MaterialProperty stress tau0;
@MaterialProperty real m;
@MaterialProperty strainrate da;
@MaterialProperty real r;

//! Cumulative shear strain on slip systems
@AuxiliaryStateVariable real gc;
@LocalVariable real dgc;

//! Slip system strength 
@AuxiliaryStateVariable real y[Nss];
@LocalVariable real dy[Nss];

// For Abaqus
@AbaqusOrthotropyManagementPolicy[abaqus,abaqusexplicit] MFront;

@Integrator{
  // Strength of slip system y[i]
  dgc = real{};
  for(unsigned short i=0;i!=Nss;++i){
    dgc+=abs(dg[i]);
  }
  // self-hardening
  const auto hb = h0/power<2>(std::cosh((h0*(gc+dgc))/(tau_sat-tau0)));
  // plastic slip
  for(unsigned short i=0;i!=Nss;++i){
    // Strain hardening
    dy[i] = real{};
    for(unsigned short j=0;j!=Nss;++j){
      const auto qab = (ss.areCoplanar(i,j)) ? 1 : r;
      // Strain hardening increment
      dy[i] += qab*hb*abs(dg[j]);
    }
    // Resolved shear stress
    const auto tau = ss.mu[i] | M ;
    if (abs(tau)>0){
      const auto y_   = y[i]+dy[i];
      const auto sgn  = tau/abs(tau);
      const auto hsi  = dt*da*pow(abs(tau/y_),m-1)/y_;
      fg[i] -= hsi*abs(tau)*sgn;
      const auto Hsi  = hsi*m;
      dfg_ddeel(i)    = -Hsi*(ss.mu[i]|dM_ddeel);
      dfg_ddg(i,i)   -=  m*fg[i]*hb/y_;
    }
  }
} // end of @Integrator

@UpdateAuxiliaryStateVariables{
  gc+=dgc;
  y+=dy;
} // end of @UpdateAuxiliaryStateVariables
